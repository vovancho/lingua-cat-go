// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/go-playground/universal-translator"
	"github.com/go-playground/validator/v10"
	"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"
	"github.com/jmoiron/sqlx"
	grpc2 "github.com/vovancho/lingua-cat-go/dictionary/delivery/grpc"
	"github.com/vovancho/lingua-cat-go/dictionary/delivery/grpc/gen"
	http2 "github.com/vovancho/lingua-cat-go/dictionary/delivery/http"
	"github.com/vovancho/lingua-cat-go/dictionary/domain"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/config"
	validator3 "github.com/vovancho/lingua-cat-go/dictionary/internal/validator"
	"github.com/vovancho/lingua-cat-go/dictionary/repository/postgres"
	"github.com/vovancho/lingua-cat-go/dictionary/usecase"
	"github.com/vovancho/lingua-cat-go/pkg/auth"
	"github.com/vovancho/lingua-cat-go/pkg/db"
	"github.com/vovancho/lingua-cat-go/pkg/response"
	"github.com/vovancho/lingua-cat-go/pkg/tracing"
	"github.com/vovancho/lingua-cat-go/pkg/translator"
	"github.com/vovancho/lingua-cat-go/pkg/txmanager"
	validator2 "github.com/vovancho/lingua-cat-go/pkg/validator"
	"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc"
	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	"go.opentelemetry.io/otel/sdk/trace"
	"google.golang.org/grpc"
	"net/http"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	utTranslator, err := translator.NewTranslator()
	if err != nil {
		return nil, err
	}
	validate := ProvideInternalValidator(utTranslator)
	publicKeyPath := ProvidePublicKeyPath(configConfig)
	authService, err := auth.NewAuthService(publicKeyPath)
	if err != nil {
		return nil, err
	}
	driverName := ProvideDriverName(configConfig)
	dsn := ProvideDSN(configConfig)
	sqlxDB, err := db.NewDB(driverName, dsn)
	if err != nil {
		return nil, err
	}
	manager := txmanager.New(sqlxDB)
	dictionaryRepository := postgres.NewDictionaryRepository(sqlxDB, manager)
	dictionaryUseCase := usecase.NewDictionaryUseCase(dictionaryRepository, validate)
	responder := response.NewResponder(utTranslator)
	server := newHTTPServer(configConfig, validate, utTranslator, authService, dictionaryUseCase, responder)
	grpcServer := newGRPCServer(authService, dictionaryUseCase)
	serviceName := ProvideTracingServiceName(configConfig)
	endpoint := ProvideTracingEndpoint(configConfig)
	tracerProvider, err := tracing.NewTracer(serviceName, endpoint)
	if err != nil {
		return nil, err
	}
	app := NewApp(configConfig, server, grpcServer, sqlxDB, tracerProvider)
	return app, nil
}

// wire.go:

// App представляет приложение с конфигурацией и серверами
type App struct {
	Config     *config.Config
	HTTPServer *http.Server
	GRPCServer *grpc.Server
	DB         *sqlx.DB
	Tracer     *trace.TracerProvider
}

// NewApp создаёт новый экземпляр App
func NewApp(
	cfg *config.Config,
	httpServer *http.Server,
	grpcServer *grpc.Server, db2 *sqlx.DB,
	tracer *trace.TracerProvider,
) *App {
	return &App{
		Config:     cfg,
		HTTPServer: httpServer,
		GRPCServer: grpcServer,
		DB:         db2,
		Tracer:     tracer,
	}
}

func ProvideDriverName(cfg *config.Config) db.DriverName {
	return db.DriverName("postgres")
}

func ProvideDSN(cfg *config.Config) db.DSN {
	return db.DSN(cfg.DBDSN)
}

func ProvideInternalValidator(trans ut.Translator) *validator.Validate {
	pkgValidator, err := validator2.NewValidator(trans)
	if err != nil {
		panic(err)
	}

	internalValidator, err := validator3.NewValidator(pkgValidator, trans)
	if err != nil {
		panic(err)
	}

	return internalValidator
}

func ProvidePublicKeyPath(cfg *config.Config) auth.PublicKeyPath {
	return auth.PublicKeyPath(cfg.AuthPublicKeyPath)
}

func ProvideTracingServiceName(cfg *config.Config) tracing.ServiceName {
	return tracing.ServiceName(cfg.ServiceName)
}

func ProvideTracingEndpoint(cfg *config.Config) tracing.Endpoint {
	return tracing.Endpoint(cfg.JaegerCollectorEndpoint)
}

// newHTTPServer создаёт новый HTTP-сервер
func newHTTPServer(
	cfg *config.Config, validator4 *validator.Validate,
	trans ut.Translator,
	authService *auth.AuthService,
	dictionaryUseCase domain.DictionaryUseCase,
	responder response.Responder,
) *http.Server {
	router := http.NewServeMux()
	http2.NewDictionaryHandler(router, responder, dictionaryUseCase, validator4)

	gwmux := runtime.NewServeMux()
	opts := []grpc.DialOption{grpc.WithInsecure()}
	if err := dictionary.RegisterDictionaryServiceHandlerFromEndpoint(context.Background(), gwmux, cfg.GRPCPort, opts); err != nil {
		panic(err)
	}

	gwHandler := authService.AuthMiddleware(gwmux)
	gwHandler = response.ErrorMiddleware(gwHandler)
	gwHandler = otelhttp.NewHandler(gwHandler, "grpc-gateway")
	gwHandler = http.TimeoutHandler(gwHandler, cfg.Timeout, "Request timeout")

	mainMux := http.NewServeMux()
	mainMux.Handle("/grpc-gw-swagger.json", http.FileServer(http.Dir("docs")))
	mainMux.Handle("/grpc-gateway/", gwHandler)

	httpHandler := authService.AuthMiddleware(router)
	httpHandler = response.ErrorMiddleware(httpHandler)
	httpHandler = otelhttp.NewHandler(httpHandler, "dictionary-http")
	httpHandler = http.TimeoutHandler(httpHandler, cfg.Timeout, "Request timeout")

	mainMux.Handle("/swagger.json", http.FileServer(http.Dir("docs")))
	mainMux.Handle("/", httpHandler)

	return &http.Server{
		Addr:    cfg.HTTPPort,
		Handler: mainMux,
	}
}

// newGRPCServer создаёт новый gRPC-сервер
func newGRPCServer(
	authService *auth.AuthService,
	dictionaryUseCase domain.DictionaryUseCase,
) *grpc.Server {
	grpcServer := grpc.NewServer(grpc.ChainUnaryInterceptor(otelgrpc.UnaryServerInterceptor(), authService.AuthInterceptor), grpc.StreamInterceptor(otelgrpc.StreamServerInterceptor()),
	)
	dictionary.RegisterDictionaryServiceServer(grpcServer, grpc2.NewDictionaryHandler(dictionaryUseCase))

	return grpcServer
}
