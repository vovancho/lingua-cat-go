// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/go-playground/universal-translator"
	validator2 "github.com/go-playground/validator/v10"
	"github.com/jmoiron/sqlx"
	grpc2 "github.com/vovancho/lingua-cat-go/dictionary/dictionary/delivery/grpc"
	"github.com/vovancho/lingua-cat-go/dictionary/dictionary/delivery/grpc/gen"
	http2 "github.com/vovancho/lingua-cat-go/dictionary/dictionary/delivery/http"
	"github.com/vovancho/lingua-cat-go/dictionary/dictionary/repository/postgres"
	"github.com/vovancho/lingua-cat-go/dictionary/dictionary/usecase"
	"github.com/vovancho/lingua-cat-go/dictionary/domain"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/auth"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/config"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/db"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/response"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/translator"
	"github.com/vovancho/lingua-cat-go/dictionary/internal/validator"
	"google.golang.org/grpc"
	"net/http"
	"time"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	utTranslator, err := translator.NewTranslator()
	if err != nil {
		return nil, err
	}
	validate, err := validator.NewValidator(utTranslator)
	if err != nil {
		return nil, err
	}
	publicKeyPath := ProvidePublicKeyPath(configConfig)
	authService, err := auth.NewAuthService(publicKeyPath)
	if err != nil {
		return nil, err
	}
	dsn := ProvideDSN(configConfig)
	sqlxDB, err := db.NewDB(dsn)
	if err != nil {
		return nil, err
	}
	postgresDB := getPostgresDB(sqlxDB)
	dictionaryRepository := postgres.NewPostgresDictionaryRepository(postgresDB)
	timeout := ProvideUseCaseTimeout(configConfig)
	dictionaryUseCase := usecase.NewDictionaryUseCase(dictionaryRepository, validate, timeout)
	server := newHTTPServer(configConfig, validate, utTranslator, authService, dictionaryUseCase)
	grpcServer := newGRPCServer(validate, authService, dictionaryUseCase)
	app := NewApp(configConfig, server, grpcServer, sqlxDB)
	return app, nil
}

// wire.go:

// App представляет приложение с конфигурацией и серверами
type App struct {
	Config     *config.Config
	HTTPServer *http.Server
	GRPCServer *grpc.Server
	DB         *sqlx.DB
}

// NewApp создаёт новый экземпляр App
func NewApp(cfg *config.Config, httpServer *http.Server, grpcServer *grpc.Server, db2 *sqlx.DB) *App {
	return &App{
		Config:     cfg,
		HTTPServer: httpServer,
		GRPCServer: grpcServer,
		DB:         db2,
	}
}

func ProvideDSN(cfg *config.Config) db.DSN {
	return db.DSN(cfg.DBDSN)
}

func ProvidePublicKeyPath(cfg *config.Config) auth.PublicKeyPath {
	return auth.PublicKeyPath(cfg.AuthPublicKeyPath)
}

// getPostgresDB возвращает *sqlx.DB как postgres.DB
func getPostgresDB(db2 *sqlx.DB) postgres.DB {
	return db2
}

// getUseCaseTimeout возвращает таймаут для use case из конфигурации
func ProvideUseCaseTimeout(cfg *config.Config) usecase.Timeout {
	return usecase.Timeout(time.Duration(cfg.Timeout) * time.Second)
}

// newHTTPServer создаёт новый HTTP-сервер
func newHTTPServer(
	cfg *config.Config,
	validate *validator2.Validate,
	trans ut.Translator,
	authService *auth.AuthService,
	dictionaryUcase domain.DictionaryUseCase,
) *http.Server {
	router := http.NewServeMux()
	http2.NewDictionaryHandler(router, validate, dictionaryUcase)
	return &http.Server{
		Addr:    cfg.HTTPPort,
		Handler: response.ErrorMiddleware(authService.AuthMiddleware(router), trans),
	}
}

// newGRPCServer создаёт новый gRPC-сервер
func newGRPCServer(
	validate *validator2.Validate,
	authService *auth.AuthService,
	dictionaryUcase domain.DictionaryUseCase,
) *grpc.Server {
	grpcServer := grpc.NewServer(grpc.UnaryInterceptor(authService.AuthInterceptor))
	dictionary.RegisterDictionaryServiceServer(grpcServer, grpc2.NewDictionaryHandler(validate, dictionaryUcase))
	return grpcServer
}
