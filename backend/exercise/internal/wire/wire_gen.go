// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/ThreeDotsLabs/watermill"
	"github.com/ThreeDotsLabs/watermill-kafka/v3/pkg/kafka"
	"github.com/ThreeDotsLabs/watermill-sql/v3/pkg/sql"
	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/go-playground/universal-translator"
	"github.com/go-playground/validator/v10"
	"github.com/jmoiron/sqlx"
	http2 "github.com/vovancho/lingua-cat-go/exercise/delivery/http"
	"github.com/vovancho/lingua-cat-go/exercise/domain"
	"github.com/vovancho/lingua-cat-go/exercise/internal/config"
	validator3 "github.com/vovancho/lingua-cat-go/exercise/internal/validator"
	"github.com/vovancho/lingua-cat-go/exercise/repository/grpc"
	"github.com/vovancho/lingua-cat-go/exercise/repository/postgres"
	"github.com/vovancho/lingua-cat-go/exercise/usecase"
	"github.com/vovancho/lingua-cat-go/pkg/auth"
	"github.com/vovancho/lingua-cat-go/pkg/db"
	"github.com/vovancho/lingua-cat-go/pkg/eventpublisher"
	"github.com/vovancho/lingua-cat-go/pkg/response"
	"github.com/vovancho/lingua-cat-go/pkg/tracing"
	"github.com/vovancho/lingua-cat-go/pkg/translator"
	"github.com/vovancho/lingua-cat-go/pkg/txmanager"
	validator2 "github.com/vovancho/lingua-cat-go/pkg/validator"
	"go.opentelemetry.io/contrib/instrumentation/google.golang.org/grpc/otelgrpc"
	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	"go.opentelemetry.io/otel/sdk/trace"
	grpc2 "google.golang.org/grpc"
	"net/http"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	utTranslator, err := translator.NewTranslator()
	if err != nil {
		return nil, err
	}
	validate := ProvideInternalValidator(utTranslator)
	publicKeyPath := ProvidePublicKeyPath(configConfig)
	authService, err := auth.NewAuthService(publicKeyPath)
	if err != nil {
		return nil, err
	}
	driverName := ProvideDriverName(configConfig)
	dsn := ProvideDSN(configConfig)
	sqlxDB, err := db.NewDB(driverName, dsn)
	if err != nil {
		return nil, err
	}
	exerciseRepository := postgres.NewExerciseRepository(sqlxDB)
	exerciseUseCase := usecase.NewExerciseUseCase(exerciseRepository, validate)
	clientConn, err := ProvideGRPCConn(configConfig)
	if err != nil {
		return nil, err
	}
	dictionaryRepository := grpc.NewDictionaryRepository(clientConn, authService)
	dictionaryUseCase := usecase.NewDictionaryUseCase(dictionaryRepository)
	manager := txmanager.New(sqlxDB)
	taskRepository := postgres.NewTaskRepository(sqlxDB, manager)
	exerciseCompletedPublisherInterface := ProvideExerciseCompletedPublisher(configConfig)
	taskUseCase := usecase.NewTaskUseCase(exerciseUseCase, dictionaryUseCase, taskRepository, exerciseCompletedPublisherInterface)
	responder := response.NewResponder(utTranslator)
	server := newHTTPServer(configConfig, validate, authService, exerciseUseCase, taskUseCase, responder)
	loggerAdapter := ProvideLogger()
	subscriber, err := ProvideSubscriber(sqlxDB, loggerAdapter)
	if err != nil {
		return nil, err
	}
	publisher, err := ProvidePublisher(configConfig, loggerAdapter)
	if err != nil {
		return nil, err
	}
	router, err := ProvideOutboxRouter(loggerAdapter, subscriber, publisher, configConfig)
	if err != nil {
		return nil, err
	}
	serviceName := ProvideTracingServiceName(configConfig)
	endpoint := ProvideTracingEndpoint(configConfig)
	tracerProvider, err := tracing.NewTracer(serviceName, endpoint)
	if err != nil {
		return nil, err
	}
	app := NewApp(configConfig, server, sqlxDB, router, tracerProvider)
	return app, nil
}

// wire.go:

// App представляет приложение с конфигурацией и серверами
type App struct {
	Config     *config.Config
	HTTPServer *http.Server
	DB         *sqlx.DB
	Outbox     *message.Router
	Tracer     *trace.TracerProvider
}

// NewApp создаёт новый экземпляр App
func NewApp(
	cfg *config.Config,
	httpServer *http.Server, db2 *sqlx.DB,
	outbox *message.Router,
	tracer *trace.TracerProvider,
) *App {
	return &App{
		Config:     cfg,
		HTTPServer: httpServer,
		DB:         db2,
		Outbox:     outbox,
		Tracer:     tracer,
	}
}

func ProvideDriverName(cfg *config.Config) db.DriverName {
	return db.DriverName("postgres")
}

func ProvideDSN(cfg *config.Config) db.DSN {
	return db.DSN(cfg.DBDSN)
}

func ProvideInternalValidator(trans ut.Translator) *validator.Validate {
	pkgValidator, err := validator2.NewValidator(trans)
	if err != nil {
		panic(err)
	}

	internalValidator, err := validator3.NewValidator(pkgValidator, trans)
	if err != nil {
		panic(err)
	}

	return internalValidator
}

func ProvidePublicKeyPath(cfg *config.Config) auth.PublicKeyPath {
	return auth.PublicKeyPath(cfg.AuthPublicKeyPath)
}

func ProvideExerciseCompletedPublisher(cfg *config.Config) usecase.ExerciseCompletedPublisherInterface {
	topic := eventpublisher.EventTopicName(cfg.KafkaExerciseCompletedTopic)

	return eventpublisher.NewEventPublisher(topic)
}

func ProvideTracingServiceName(cfg *config.Config) tracing.ServiceName {
	return tracing.ServiceName(cfg.ServiceName)
}

func ProvideTracingEndpoint(cfg *config.Config) tracing.Endpoint {
	return tracing.Endpoint(cfg.JaegerCollectorEndpoint)
}

func ProvideGRPCConn(cfg *config.Config) (*grpc2.ClientConn, error) {
	conn, err := grpc2.Dial(cfg.DictionaryGRPCAddress, grpc2.WithInsecure(), grpc2.WithUnaryInterceptor(otelgrpc.UnaryClientInterceptor()), grpc2.WithStreamInterceptor(otelgrpc.StreamClientInterceptor()))
	if err != nil {
		return nil, err
	}
	return conn, nil
}

// newHTTPServer создаёт новый HTTP-сервер
func newHTTPServer(
	cfg *config.Config, validator4 *validator.Validate,
	authService *auth.AuthService,
	exerciseUseCase domain.ExerciseUseCase,
	taskUseCase domain.TaskUseCase,
	responder response.Responder,
) *http.Server {
	router := http.NewServeMux()
	http2.NewExerciseHandler(router, responder, exerciseUseCase, validator4, authService)
	http2.NewTaskHandler(router, responder, taskUseCase, exerciseUseCase, validator4, authService)

	mainMux := http.NewServeMux()
	mainMux.Handle("/swagger.json", http.FileServer(http.Dir("docs")))
	mainMux.Handle("/", otelhttp.NewHandler(response.ErrorMiddleware(authService.AuthMiddleware(router)), "exercise-http"))

	return &http.Server{
		Addr:    cfg.HTTPPort,
		Handler: mainMux,
	}
}

// ProvideLogger создает Watermill логгер
func ProvideLogger() watermill.LoggerAdapter {

	return watermill.NopLogger{}
}

// ProvideSubscriber создает SQL-подписчик
func ProvideSubscriber(db2 *sqlx.DB, logger watermill.LoggerAdapter) (message.Subscriber, error) {
	return sql.NewSubscriber(db2, sql.SubscriberConfig{
		SchemaAdapter:    sql.DefaultPostgreSQLSchema{},
		OffsetsAdapter:   sql.DefaultPostgreSQLOffsetsAdapter{},
		InitializeSchema: false,
	}, logger,
	)
}

// ProvidePublisher создает Kafka-паблишер
func ProvidePublisher(cfg *config.Config, logger watermill.LoggerAdapter) (message.Publisher, error) {
	return kafka.NewPublisher(kafka.PublisherConfig{
		Brokers:   []string{cfg.KafkaBroker},
		Marshaler: kafka.DefaultMarshaler{},
	}, logger,
	)
}

// ProvideOutboxRouter создает outbox роутер из БД ProvideSubscriber в ProvidePublisher
func ProvideOutboxRouter(
	logger watermill.LoggerAdapter,
	subscriber message.Subscriber,
	publisher message.Publisher,
	cfg *config.Config,
) (*message.Router, error) {
	router, err := message.NewRouter(message.RouterConfig{}, logger)
	if err != nil {
		return nil, err
	}

	router.AddNoPublisherHandler(
		"outbox_to_kafka",
		cfg.KafkaExerciseCompletedTopic,
		subscriber,
		func(msg *message.Message) error {
			return publisher.Publish(cfg.KafkaExerciseCompletedTopic, msg)
		},
	)

	return router, nil
}
