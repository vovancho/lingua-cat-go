// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: proto/dictionary.proto

package dictionary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DictionaryServiceClient is the client API for DictionaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DictionaryServiceClient interface {
	// Метод для получения случайных словарей
	GetRandomDictionaries(ctx context.Context, in *GetRandomDictionariesRequest, opts ...grpc.CallOption) (*GetRandomDictionariesResponse, error)
	// Метод для получения словарей по ID
	GetDictionaries(ctx context.Context, in *GetDictionariesRequest, opts ...grpc.CallOption) (*GetDictionariesResponse, error)
}

type dictionaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDictionaryServiceClient(cc grpc.ClientConnInterface) DictionaryServiceClient {
	return &dictionaryServiceClient{cc}
}

func (c *dictionaryServiceClient) GetRandomDictionaries(ctx context.Context, in *GetRandomDictionariesRequest, opts ...grpc.CallOption) (*GetRandomDictionariesResponse, error) {
	out := new(GetRandomDictionariesResponse)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/GetRandomDictionaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dictionaryServiceClient) GetDictionaries(ctx context.Context, in *GetDictionariesRequest, opts ...grpc.CallOption) (*GetDictionariesResponse, error) {
	out := new(GetDictionariesResponse)
	err := c.cc.Invoke(ctx, "/dictionary.DictionaryService/GetDictionaries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DictionaryServiceServer is the server API for DictionaryService service.
// All implementations should embed UnimplementedDictionaryServiceServer
// for forward compatibility
type DictionaryServiceServer interface {
	// Метод для получения случайных словарей
	GetRandomDictionaries(context.Context, *GetRandomDictionariesRequest) (*GetRandomDictionariesResponse, error)
	// Метод для получения словарей по ID
	GetDictionaries(context.Context, *GetDictionariesRequest) (*GetDictionariesResponse, error)
}

// UnimplementedDictionaryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDictionaryServiceServer struct {
}

func (UnimplementedDictionaryServiceServer) GetRandomDictionaries(context.Context, *GetRandomDictionariesRequest) (*GetRandomDictionariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomDictionaries not implemented")
}
func (UnimplementedDictionaryServiceServer) GetDictionaries(context.Context, *GetDictionariesRequest) (*GetDictionariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionaries not implemented")
}

// UnsafeDictionaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DictionaryServiceServer will
// result in compilation errors.
type UnsafeDictionaryServiceServer interface {
	mustEmbedUnimplementedDictionaryServiceServer()
}

func RegisterDictionaryServiceServer(s grpc.ServiceRegistrar, srv DictionaryServiceServer) {
	s.RegisterService(&DictionaryService_ServiceDesc, srv)
}

func _DictionaryService_GetRandomDictionaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRandomDictionariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetRandomDictionaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/GetRandomDictionaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetRandomDictionaries(ctx, req.(*GetRandomDictionariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DictionaryService_GetDictionaries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DictionaryServiceServer).GetDictionaries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dictionary.DictionaryService/GetDictionaries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DictionaryServiceServer).GetDictionaries(ctx, req.(*GetDictionariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DictionaryService_ServiceDesc is the grpc.ServiceDesc for DictionaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DictionaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dictionary.DictionaryService",
	HandlerType: (*DictionaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRandomDictionaries",
			Handler:    _DictionaryService_GetRandomDictionaries_Handler,
		},
		{
			MethodName: "GetDictionaries",
			Handler:    _DictionaryService_GetDictionaries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dictionary.proto",
}
