// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/ThreeDotsLabs/watermill"
	kafka2 "github.com/ThreeDotsLabs/watermill-kafka/v3/pkg/kafka"
	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/go-playground/universal-translator"
	"github.com/go-playground/validator/v10"
	"github.com/jmoiron/sqlx"
	http3 "github.com/vovancho/lingua-cat-go/analytics/delivery/http"
	"github.com/vovancho/lingua-cat-go/analytics/delivery/kafka"
	"github.com/vovancho/lingua-cat-go/analytics/domain"
	"github.com/vovancho/lingua-cat-go/analytics/internal/config"
	validator3 "github.com/vovancho/lingua-cat-go/analytics/internal/validator"
	"github.com/vovancho/lingua-cat-go/analytics/repository/clickhouse"
	"github.com/vovancho/lingua-cat-go/analytics/repository/http"
	"github.com/vovancho/lingua-cat-go/analytics/usecase"
	"github.com/vovancho/lingua-cat-go/pkg/auth"
	"github.com/vovancho/lingua-cat-go/pkg/db"
	"github.com/vovancho/lingua-cat-go/pkg/response"
	"github.com/vovancho/lingua-cat-go/pkg/tracing"
	"github.com/vovancho/lingua-cat-go/pkg/translator"
	validator2 "github.com/vovancho/lingua-cat-go/pkg/validator"
	"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"
	"go.opentelemetry.io/otel/sdk/trace"
	http2 "net/http"
	"time"
)

import (
	_ "github.com/ClickHouse/clickhouse-go/v2"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	utTranslator, err := translator.NewTranslator()
	if err != nil {
		return nil, err
	}
	validate := ProvideInternalValidator(utTranslator)
	publicKeyPath := ProvidePublicKeyPath(configConfig)
	authService, err := auth.NewAuthService(publicKeyPath)
	if err != nil {
		return nil, err
	}
	driverName := ProvideDriverName(configConfig)
	dsn := ProvideDSN(configConfig)
	sqlxDB, err := db.NewDB(driverName, dsn)
	if err != nil {
		return nil, err
	}
	exerciseCompleteRepository := clickhouse.NewClickhouseExerciseCompleteRepository(sqlxDB)
	timeout := ProvideUseCaseTimeout(configConfig)
	exerciseCompleteUseCase := usecase.NewExerciseCompleteUseCase(exerciseCompleteRepository, validate, timeout)
	server := newHTTPServer(configConfig, validate, utTranslator, authService, exerciseCompleteUseCase)
	loggerAdapter := ProvideLogger()
	subscriber, err := ProvideSubscriber(configConfig, loggerAdapter)
	if err != nil {
		return nil, err
	}
	v, err := ProvideMessages(configConfig, subscriber)
	if err != nil {
		return nil, err
	}
	httpConfig := ProvideKeycloakConfig(configConfig)
	client := ProvideUserHttpClient()
	userRepository := http.NewHttpUserRepository(httpConfig, client)
	userUseCase := usecase.NewUserUseCase(userRepository, timeout)
	exerciseCompleteHandler := kafka.NewExerciseCompleteHandler(validate, exerciseCompleteUseCase, userUseCase)
	serviceName := ProvideTracingServiceName(configConfig)
	endpoint := ProvideTracingEndpoint(configConfig)
	tracerProvider, err := tracing.NewTracer(serviceName, endpoint)
	if err != nil {
		return nil, err
	}
	app := NewApp(configConfig, server, sqlxDB, subscriber, v, exerciseCompleteHandler, tracerProvider)
	return app, nil
}

// wire.go:

// App представляет приложение с конфигурацией и серверами
type App struct {
	Config           *config.Config
	HTTPServer       *http2.Server
	DB               *sqlx.DB
	Consumer         *kafka2.Subscriber
	ConsumerMessages <-chan *message.Message
	ConsumerHandler  *kafka.ExerciseCompleteHandler
	Tracer           *trace.TracerProvider
}

// NewApp создаёт новый экземпляр App
func NewApp(
	cfg *config.Config,
	httpServer *http2.Server, db2 *sqlx.DB,
	consumer *kafka2.Subscriber,
	consumerMessages <-chan *message.Message,
	consumerHandler *kafka.ExerciseCompleteHandler,
	tracer *trace.TracerProvider,
) *App {
	return &App{
		Config:           cfg,
		HTTPServer:       httpServer,
		DB:               db2,
		Consumer:         consumer,
		ConsumerMessages: consumerMessages,
		ConsumerHandler:  consumerHandler,
		Tracer:           tracer,
	}
}

func ProvideDriverName(cfg *config.Config) db.DriverName {
	return db.DriverName("clickhouse")
}

func ProvideDSN(cfg *config.Config) db.DSN {
	return db.DSN(cfg.DBDSN)
}

func ProvideInternalValidator(trans ut.Translator) *validator.Validate {
	pkgValidator, err := validator2.NewValidator(trans)
	if err != nil {
		panic(err)
	}

	internalValidator, err := validator3.NewValidator(pkgValidator, trans)
	if err != nil {
		panic(err)
	}

	return internalValidator
}

func ProvidePublicKeyPath(cfg *config.Config) auth.PublicKeyPath {
	return auth.PublicKeyPath(cfg.AuthPublicKeyPath)
}

// getUseCaseTimeout возвращает таймаут для use case из конфигурации
func ProvideUseCaseTimeout(cfg *config.Config) usecase.Timeout {
	return usecase.Timeout(time.Duration(cfg.Timeout) * time.Second)
}

func ProvideTracingServiceName(cfg *config.Config) tracing.ServiceName {
	return tracing.ServiceName(cfg.ServiceName)
}

func ProvideTracingEndpoint(cfg *config.Config) tracing.Endpoint {
	return tracing.Endpoint(cfg.JaegerCollectorEndpoint)
}

// newHTTPServer создаёт новый HTTP-сервер
func newHTTPServer(
	cfg *config.Config,
	validate *validator.Validate,
	trans ut.Translator,
	authService *auth.AuthService,
	exerciseCompleteUcase domain.ExerciseCompleteUseCase,
) *http2.Server {
	router := http2.NewServeMux()
	http3.NewExerciseCompleteHandler(router, validate, authService, exerciseCompleteUcase)

	mainMux := http2.NewServeMux()
	mainMux.Handle("/swagger.json", http2.FileServer(http2.Dir("docs")))
	mainMux.Handle("/", response.ErrorMiddleware(authService.AuthMiddleware(otelhttp.NewHandler(router, "analytics-http")), trans))

	return &http2.Server{
		Addr:    cfg.HTTPPort,
		Handler: mainMux,
	}
}

// ProvideLogger создает Watermill логгер
func ProvideLogger() watermill.LoggerAdapter {

	return watermill.NopLogger{}
}

// ProvideSubscriber создает Kafka Subscriber
func ProvideSubscriber(cfg *config.Config, logger watermill.LoggerAdapter) (*kafka2.Subscriber, error) {
	return kafka2.NewSubscriber(kafka2.SubscriberConfig{
		Brokers:       []string{cfg.KafkaBroker},
		ConsumerGroup: cfg.KafkaExerciseCompletedGroup,
		Unmarshaler:   kafka2.DefaultMarshaler{},
	}, logger,
	)
}

// ProvideMessages создает канал сообщений
func ProvideMessages(cfg *config.Config, subscriber *kafka2.Subscriber) (<-chan *message.Message, error) {
	ctx := context.Background()
	return subscriber.Subscribe(ctx, cfg.KafkaExerciseCompletedTopic)
}

// ProvideKeycloakConfig создает конфигурацию для Keycloak из общей конфигурации
func ProvideKeycloakConfig(cfg *config.Config) http.Config {
	return http.Config{
		AdminRealmEndpoint: cfg.KeycloakAdminRealmEndpoint,
		AdminToken:         cfg.KeycloakAdminToken,
	}
}

// ProvideUserHttpClient создает HTTP-клиент для httpUserRepository
func ProvideUserHttpClient() *http2.Client {
	return &http2.Client{
		Transport: otelhttp.NewTransport(http2.DefaultTransport),
	}
}
