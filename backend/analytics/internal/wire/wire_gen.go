// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"context"
	"github.com/ThreeDotsLabs/watermill"
	"github.com/ThreeDotsLabs/watermill-kafka/v3/pkg/kafka"
	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/go-playground/universal-translator"
	validator2 "github.com/go-playground/validator/v10"
	"github.com/jmoiron/sqlx"
	http2 "github.com/vovancho/lingua-cat-go/analytics/analytics/delivery/http"
	"github.com/vovancho/lingua-cat-go/analytics/analytics/repository/clickhouse"
	"github.com/vovancho/lingua-cat-go/analytics/analytics/usecase"
	"github.com/vovancho/lingua-cat-go/analytics/domain"
	"github.com/vovancho/lingua-cat-go/analytics/internal/auth"
	"github.com/vovancho/lingua-cat-go/analytics/internal/config"
	"github.com/vovancho/lingua-cat-go/analytics/internal/db"
	"github.com/vovancho/lingua-cat-go/analytics/internal/response"
	"github.com/vovancho/lingua-cat-go/analytics/internal/translator"
	"github.com/vovancho/lingua-cat-go/analytics/internal/validator"
	"net/http"
	"time"
)

// Injectors from wire.go:

func InitializeApp() (*App, error) {
	configConfig, err := config.Load()
	if err != nil {
		return nil, err
	}
	utTranslator, err := translator.NewTranslator()
	if err != nil {
		return nil, err
	}
	validate, err := validator.NewValidator(utTranslator)
	if err != nil {
		return nil, err
	}
	publicKeyPath := ProvidePublicKeyPath(configConfig)
	authService, err := auth.NewAuthService(publicKeyPath)
	if err != nil {
		return nil, err
	}
	dsn := ProvideDSN(configConfig)
	sqlxDB, err := db.NewDB(dsn)
	if err != nil {
		return nil, err
	}
	dbDB := getClickHouseDB(sqlxDB)
	exerciseCompleteRepository := clickhouse.NewClickhouseExerciseCompleteRepository(dbDB)
	timeout := ProvideUseCaseTimeout(configConfig)
	exerciseCompleteUseCase := usecase.NewExerciseCompleteUseCase(exerciseCompleteRepository, validate, timeout)
	server := newHTTPServer(configConfig, validate, utTranslator, authService, exerciseCompleteUseCase)
	loggerAdapter := ProvideLogger()
	subscriber, err := ProvideSubscriber(configConfig, loggerAdapter)
	if err != nil {
		return nil, err
	}
	v, err := ProvideMessages(configConfig, subscriber)
	if err != nil {
		return nil, err
	}
	app := NewApp(configConfig, server, sqlxDB, subscriber, v)
	return app, nil
}

// wire.go:

// App представляет приложение с конфигурацией и серверами
type App struct {
	Config           *config.Config
	HTTPServer       *http.Server
	DB               *sqlx.DB
	Consumer         *kafka.Subscriber
	ConsumerMessages <-chan *message.Message
}

// NewApp создаёт новый экземпляр App
func NewApp(
	cfg *config.Config,
	httpServer *http.Server, db2 *sqlx.DB,
	consumer *kafka.Subscriber,
	consumerMessages <-chan *message.Message,
) *App {
	return &App{
		Config:           cfg,
		HTTPServer:       httpServer,
		DB:               db2,
		Consumer:         consumer,
		ConsumerMessages: consumerMessages,
	}
}

func ProvideDSN(cfg *config.Config) db.DSN {
	return db.DSN(cfg.DBDSN)
}

func ProvidePublicKeyPath(cfg *config.Config) auth.PublicKeyPath {
	return auth.PublicKeyPath(cfg.AuthPublicKeyPath)
}

// getPostgresDB возвращает *sqlx.DB как db.DB
func getClickHouseDB(db2 *sqlx.DB) db.DB {
	return db2
}

// getUseCaseTimeout возвращает таймаут для use case из конфигурации
func ProvideUseCaseTimeout(cfg *config.Config) usecase.Timeout {
	return usecase.Timeout(time.Duration(cfg.Timeout) * time.Second)
}

// newHTTPServer создаёт новый HTTP-сервер
func newHTTPServer(
	cfg *config.Config,
	validate *validator2.Validate,
	trans ut.Translator,
	authService *auth.AuthService,
	exerciseCompleteUcase domain.ExerciseCompleteUseCase,
) *http.Server {
	router := http.NewServeMux()
	http2.NewExerciseCompleteHandler(router, validate, authService, exerciseCompleteUcase)
	return &http.Server{
		Addr:    cfg.HTTPPort,
		Handler: response.ErrorMiddleware(authService.AuthMiddleware(router), trans),
	}
}

// ProvideLogger создает Watermill логгер
func ProvideLogger() watermill.LoggerAdapter {
	return watermill.NewStdLogger(false, false)

}

// ProvideSubscriber создает Kafka Subscriber
func ProvideSubscriber(cfg *config.Config, logger watermill.LoggerAdapter) (*kafka.Subscriber, error) {
	return kafka.NewSubscriber(kafka.SubscriberConfig{
		Brokers:       []string{cfg.KafkaBroker},
		ConsumerGroup: cfg.KafkaExerciseCompletedGroup,
		Unmarshaler:   kafka.DefaultMarshaler{},
	}, logger,
	)
}

// ProvideMessages создает канал сообщений
func ProvideMessages(cfg *config.Config, subscriber *kafka.Subscriber) (<-chan *message.Message, error) {
	ctx := context.Background()
	return subscriber.Subscribe(ctx, cfg.KafkaExerciseCompletedTopic)
}
